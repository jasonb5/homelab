---
- name: Create VM templates
  hosts: vms:!unraid
  gather_facts: false
  vars:
    ansible_user: root
    artifact_dir: artifacts
    vault_ca_path: "{{ artifact_dir }}/trusted-user-ca-keys.pem"
    proxmox_host: "{{ node }}.angrydonkey.io"
    hostname: "{{ inventory_hostname }}"
    update: false
    destroy: false
  tasks:
    - name: Check if vm exists
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_password: "{{ proxmox_password }}"
        api_user: "{{ proxmox_user }}"
        name: "{{ inventory_hostname }}"
        state: current
        vmid: "{{ vmid }}"
      ignore_errors: true
      delegate_to: localhost
      register: check_vm
      when: not (update or destroy)
    - block:
      - name: Get admin password
        community.hashi_vault.vault_kv2_get:
          url: https://vault.angrydonkey.io
          engine_mount_point: homelab
          path: vms
          username: "{{ vault_username }}"
          password: "{{ vault_password }}"
        delegate_to: localhost
        register: vault_admin_password
      - name: Create cloud-init configuration
        vars:
          ansible_password: "{{ proxmox_password }}"
          trusted_user_ca_keys: "{{ lookup('ansible.builtin.file', vault_ca_path) }}"
          username: "{{ admin_user }}"
          password: "{{ vault_admin_password.secret.password | password_hash(hashtype='sha512', rounds=500000) }}"
        ansible.builtin.template:
          src: user.j2
          dest: /var/lib/vz/snippets/{{ inventory_hostname }}-{{ vmid }}-user.yaml
        delegate_to: "{{ node }}"
      - name: Create cloud-init configuration
        vars:
          ansible_password: "{{ proxmox_password }}"
          trusted_user_ca_keys: "{{ lookup('ansible.builtin.file', vault_ca_path) }}"
        ansible.builtin.template:
          src: network.j2
          dest: /var/lib/vz/snippets/{{ inventory_hostname }}-{{ vmid }}-network.yaml
        delegate_to: "{{ node }}"
      - include_tasks: _proxmox_vm.yaml
      when: (not update or destroy) and (check_vm.exception is not defined) and check_vm.failed
    - block:
      - name: copy ca public key
        ansible.builtin.copy:
          src: "{{ vault_ca_path }}"
          dest: /etc/ssh/trusted-user-ca-keys.pem
          mode: 0600
      - name: restart sshd
        ansible.builtin.systemd:
          name: sshd
          state: restarted
      when: update
    - block:
      - name: force remove VM
        community.general.proxmox_kvm:
          api_host: "{{ proxmox_host }}"
          api_password: "{{ proxmox_password }}"
          api_user: "{{ proxmox_user }}"
          name: "{{ inventory_hostname }}"
          state: absent
          force: true
          vmid: "{{ vmid }}"
        delegate_to: localhost
      when: destroy
