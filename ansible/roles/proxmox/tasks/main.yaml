---
- name: Check if vm exists
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_host }}"
    api_password: "{{ proxmox_password }}"
    api_user: "{{ proxmox_user }}"
    name: "{{ inventory_hostname }}"
    state: current
    vmid: "{{ vmid }}"
  ignore_errors: true
  delegate_to: localhost
  register: check_vm
- block:
    - name: Get admin password
      community.hashi_vault.vault_kv2_get:
        url: "{{ vault_url }}"
        engine_mount_point: homelab
        path: vms
        username: "{{ vault_username }}"
        password: "{{ vault_password }}"
      delegate_to: localhost
      register: vault_admin_password
    - name: Create cloud-init user configuration
      vars:
        trusted_user_ca_keys: "{{ lookup('ansible.builtin.file', vault_ca_path) }}"
        username: "{{ vm_admin_user }}"
        password: "{{ vault_admin_password.secret.password | password_hash(hashtype='sha512', rounds=500000) }}"
      ansible.builtin.template:
        src: user.j2
        dest: /var/lib/vz/snippets/{{ inventory_hostname }}-{{ vmid }}-user.yaml
      delegate_to: "{{ node }}"
    - name: Create cloud-init network configuration
      vars:
        trusted_user_ca_keys: "{{ lookup('ansible.builtin.file', vault_ca_path) }}"
      ansible.builtin.template:
        src: network.j2
        dest: /var/lib/vz/snippets/{{ inventory_hostname }}-{{ vmid }}-network.yaml
      delegate_to: "{{ node }}"
    - name: Create VM
      throttle: 1
      community.general.proxmox_kvm:
        agent: true
        api_host: "{{ proxmox_host }}"
        api_password: "{{ proxmox_password }}"
        api_user: "{{ proxmox_user }}"
        bios: ovmf
        boot: d
        bootdisk: virtio0
        cicustom: "user=local:snippets/{{ inventory_hostname }}-{{ vmid }}-user.yaml,network=local:snippets/{{ inventory_hostname }}-{{ vmid }}-network.yaml"
        citype: nocloud
        cpu: host
        efidisk0:
          efitype: 4m
          format: raw
          pre_enrolled_keys: false
          storage: local-lvm
        ide:
          ide2: local-lvm:cloudinit,format=raw
        machine: q35
        name: "{{ inventory_hostname }}"
        node: "{{ node }}"
        ostype: l26
        scsihw: virtio-scsi-pci
        serial:
          serial0: socket
        state: present
        vga: serial0
        vmid: "{{ vmid }}"
      delegate_to: localhost
      register: vm
      until: vm is not failed
      retries: 10
    - name: Attach cloudinit disk image
      community.general.proxmox_disk:
        api_host: "{{ proxmox_host }}"
        api_password: "{{ proxmox_password }}"
        api_user: "{{ proxmox_user }}"
        disk: virtio0
        import_from: "/mnt/pve/iso/{{ image }}"
        name: "{{ inventory_hostname }}"
        state: present
        storage: local-lvm
        vmid: "{{ vmid }}"
      delegate_to: localhost
    - name: Resize disk image
      community.general.proxmox_disk:
        api_host: "{{ proxmox_host }}"
        api_password: "{{ proxmox_password }}"
        api_user: "{{ proxmox_user }}"
        disk: virtio0
        name: "{{ inventory_hostname }}"
        size: "{{ disk_size }}"
        state: resized
        vmid: "{{ vmid }}"
      delegate_to: localhost
    - name: Start VM
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_password: "{{ proxmox_password }}"
        api_user: "{{ proxmox_user }}"
        name: "{{ inventory_hostname }}"
        state: started
        vmid: "{{ vmid }}"
      delegate_to: localhost
      ignore_errors: true
  when: (check_vm.exception is undefined) and check_vm.failed
- name: Update VM
  throttle: 1
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_host }}"
    api_password: "{{ proxmox_password }}"
    api_user: "{{ proxmox_user }}"
    cores: "{{ cores }}"
    description: "{{ description | default('') }}"
    memory: "{{ memory }}"
    name: "{{ inventory_hostname }}"
    node: "{{ node }}"
    onboot: "{{ onboot|default(false) }}"
    state: present
    update: true
    vmid: "{{ vmid }}"
  delegate_to: localhost
  register: vm
  until: vm is not failed
  retries: 10
- debug:
    var: vm
